name: RBAC To The Future
on:
  push:
    branches:
      - "rbac-**"

jobs:
  scavenger:
    name: RBAC To The Future üí´
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Start minikube
        uses: medyagh/setup-minikube@master
        id: minikube
        with:
          driver: docker
          memory: 2048
      - name: Setup
        run: |
          kubectl create namespace dev
          kubectl create namespace staging
          kubectl create namespace prod
          kubectl create namespace database
          kubectl create namespace backup

          kubectl config set-context --current --namespace=dev
          kubectl create -f ./rbac-to-the-future/k8s/nginx-deployment.yml
          kubectl config set-context --current --namespace=staging
          kubectl create -f ./rbac-to-the-future/k8s/nginx-deployment.yml
          kubectl config set-context --current --namespace=prod
          kubectl create -f ./rbac-to-the-future/k8s/nginx-deployment.yml
          kubectl config set-context --current --namespace=database
          kubectl create -f ./rbac-to-the-future/k8s/postgres-pod.yml
          kubectl config set-context --current --namespace=backup
          kubectl create -f ./rbac-to-the-future/k8s/postgres-pod.yml

          kubectl config set-context --current --namespace=default
      - name: Create Users and Contexts
        run: |
          bash ./rbac-to-the-future/create_users.sh
      # JULES
      - name: Jules RBAC Checks
        run: |
          kubectl config use-context minikube
          kubectl apply -f ./rbac-to-the-future/roles/intern.yml
          kubectl config use-context Jules-context

          FORBIDDEN=`kubectl get pods --namespace staging &>/dev/null; echo $?`

          if [ "$FORBIDDEN" == "1" ]; then
            echo "‚úÖ Cannot access pods in non-dev namespace"
          else
            echo "‚ùå Can access pods in non-dev namespace"
          fi

          FORBIDDEN=`kubectl run my-pod --image=nginx --namespace dev &>/dev/null; echo $?`
          if [ "$FORBIDDEN" == "1" ]; then
            echo "‚úÖ Cannot create/update resources in dev namespace"
          else
            echo "‚ùå Can create/update resources in dev namespace"
          fi

          ALLOWED=`kubectl get pods --namespace dev &>/dev/null; echo $?`
          if [ "$ALLOWED" == "0" ]; then
            echo "‚úÖ Can access pods in dev namespace"
          else
            echo "‚ùå Cannot access pods in dev namespace"
          fi
      # JESSICA
      - name: Jessica RBAC Checks
        run: |
          kubectl config use-context minikube
          kubectl apply -f ./rbac-to-the-future/roles/db-admin/db-admin-role.yml

          NS=`cat ./rbac-to-the-future/roles/db-admin/db-admin-rolebinding.yml | grep namespace | grep 'database' -o`
          if [ "$NS" == "database" ]; then
            OTHER_NS="backup"
          else
            NS="backup"
            OTHER_NS="database"
          fi 
          kubectl apply -f ./rbac-to-the-future/roles/db-admin/db-admin-rolebinding.yml
          sed "s/$NS/$OTHER_NS/g" ./rbac-to-the-future/roles/db-admin/db-admin-rolebinding.yml > ./rbac-to-the-future/roles/db-admin/db-admin-rolebinding-next.yml
          kubectl apply -f ./rbac-to-the-future/roles/db-admin/db-admin-rolebinding-next.yml

          kubectl config use-context Jessica-context

          ALLOWED=`kubectl get pods --namespace database &>/dev/null; echo $?`
          if [ "$ALLOWED" == "0" ]; then
            echo "‚úÖ Can access pods in database namespace"
          else
            echo "‚ùå Cannot access pods in database namespace"
          fi

          ALLOWED=`kubectl get pods --namespace backup &>/dev/null; echo $?`
          if [ "$ALLOWED" == "0" ]; then
            echo "‚úÖ Can access pods in backup namespace"
          else
            echo "‚ùå Cannot access pods in backup namespace"
          fi

          ALLOWED=`kubectl run my-pod --image=nginx --namespace database &>/dev/null; echo $?`
          if [ "$ALLOWED" == "0" ]; then
            echo "‚úÖ Can create pods in database namespace"
          else
            echo "‚ùå Cannot create pods in database namespace"
          fi

          ALLOWED=`kubectl delete pod my-pod --namespace database &>/dev/null; echo $?`
          if [ "$ALLOWED" == "0" ]; then
            echo "‚úÖ Can delete resources in database namespace"
          else
            echo "‚ùå Cannot delete resources in database namespace"
          fi

           ALLOWED=`kubectl run my-pod --image=nginx --namespace backup &>/dev/null; echo $?`
          if [ "$ALLOWED" == "0" ]; then
            echo "‚úÖ Can create pods in backup namespace"
          else
            echo "‚ùå Cannot create pods in database namespace"
          fi

          ALLOWED=`kubectl delete pod my-pod --namespace backup &>/dev/null; echo $?`
          if [ "$ALLOWED" == "0" ]; then
            echo "‚úÖ Can delete resources in backup namespace"
          else
            echo "‚ùå Cannot delete resources in backup namespace"
          fi

          FORBIDDEN=`kubectl get pods --namespace dev &>/dev/null; echo $?`
          if [ "$FORBIDDEN" == "1" ]; then
            echo "‚úÖ Cannot get resources in namespaces other than database or backup"
          else
            echo "‚ùå Can get resources in namespaces other than database or backup"
          fi

          FORBIDDEN=`kubectl run my-pod --image=nginx --namespace dev &>/dev/null; echo $?`
          if [ "$FORBIDDEN" == "1" ]; then
            echo "‚úÖ Cannot create/update resources in namespaces other than database or backup"
          else
            echo "‚ùå Can create/update resources in namespaces other than database or backup"
          fi
      # JOEY
      - name: Joey RBAC Checks
        run: |
          kubectl config use-context minikube
          kubectl apply -f ./rbac-to-the-future/roles/developer/developer-role.yml

          NS=`cat ./rbac-to-the-future/roles/developer/developer-rolebinding.yml | grep namespace | grep 'dev' -o`
          if [ "$NS" == "dev" ]; then
            SECOND_NS="staging"
            THIRD_NS="prod"
          else
            NS=`cat ./rbac-to-the-future/roles/developer/developer-rolebinding.yml | grep namespace | grep 'staging' -o`
            if [ "$NS" == "staging" ]; then
              SECOND_NS="dev"
              THIRD_NS="prod"
            else
              NS="prod"
              SECOND_NS="dev"
              THIRD_NS="staging"
            fi
          fi

          kubectl apply -f ./rbac-to-the-future/roles/developer/developer-rolebinding.yml
          sed "s/$NS/$SECOND_NS/g" ./rbac-to-the-future/roles/developer/developer-rolebinding.yml > ./rbac-to-the-future/roles/developer/developer-rolebinding-second.yml
          sed "s/$NS/$THIRD_NS/g" ./rbac-to-the-future/roles/developer/developer-rolebinding.yml > ./rbac-to-the-future/roles/developer/developer-rolebinding-third.yml
          kubectl apply -f ./rbac-to-the-future/roles/developer/developer-rolebinding-second.yml
          kubectl apply -f ./rbac-to-the-future/roles/developer/developer-rolebinding-third.yml

          kubectl config use-context Joey-context

          ALLOWED=`kubectl get pods --namespace dev &>/dev/null; echo $?`
          if [ "$ALLOWED" == "0" ]; then
            echo "‚úÖ Can access pods in dev namespace"
          else
            echo "‚ùå Cannot access pods in dev namespace"
          fi

          ALLOWED=`kubectl get pods --namespace staging &>/dev/null; echo $?`
          if [ "$ALLOWED" == "0" ]; then
            echo "‚úÖ Can access pods in staging namespace"
          else
            echo "‚ùå Cannot access pods in staging namespace"
          fi

          ALLOWED=`kubectl get pods --namespace prod &>/dev/null; echo $?`
          if [ "$ALLOWED" == "0" ]; then
            echo "‚úÖ Can access pods in prod namespace"
          else
            echo "‚ùå Cannot access pods in prod namespace"
          fi

          ALLOWED=`kubectl run my-pod --image=nginx --namespace dev &>/dev/null; echo $?`
          if [ "$ALLOWED" == "0" ]; then
            echo "‚úÖ Can create pods in dev namespace"
          else
            echo "‚ùå Cannot create pods in dev namespace"
          fi

          ALLOWED=`kubectl run my-pod --image=nginx --namespace staging &>/dev/null; echo $?`
          if [ "$ALLOWED" == "0" ]; then
            echo "‚úÖ Can create staging in dev namespace"
          else
            echo "‚ùå Cannot create staging in dev namespace"
          fi

          ALLOWED=`kubectl run my-pod --image=nginx --namespace prod &>/dev/null; echo $?`
          if [ "$ALLOWED" == "0" ]; then
            echo "‚úÖ Can create prod in dev namespace"
          else
            echo "‚ùå Cannot create prod in dev namespace"
          fi

          FORBIDDEN=`kubectl delete pod my-pod --namespace dev &>/dev/null; echo $?`
          if [ "$FORBIDDEN" == "1" ]; then
            echo "‚úÖ Cannot delete resources in dev namespace"
          else
            echo "‚ùå Can delete resources in dev namespace"
          fi

          FORBIDDEN=`kubectl delete pod my-pod --namespace staging &>/dev/null; echo $?`
          if [ "$FORBIDDEN" == "1" ]; then
            echo "‚úÖ Cannot delete resources in staging namespace"
          else
            echo "‚ùå Can delete resources in staging namespace"
          fi

          FORBIDDEN=`kubectl delete pod my-pod --namespace prod &>/dev/null; echo $?`
          if [ "$FORBIDDEN" == "1" ]; then
            echo "‚úÖ Cannot delete resources in prod namespace"
          else
            echo "‚ùå Can delete resources in prod namespace"
          fi

          FORBIDDEN=`kubectl get pods --namespace database &>/dev/null; echo $?`
          if [ "$FORBIDDEN" == "1" ]; then
            echo "‚úÖ Cannot get resources in namespaces other than dev, staging or prod"
          else
            echo "‚ùå Can get resources in namespaces other than dev, staging or prod"
          fi

          FORBIDDEN=`kubectl run my-pod --image=nginx --namespace database &>/dev/null; echo $?`
          if [ "$FORBIDDEN" == "1" ]; then
            echo "‚úÖ Cannot create/update resources in namespaces other than dev, staging or prod"
          else
            echo "‚ùå Can create/update resources in namespaces other than dev, staging or prod"
          fi